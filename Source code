import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# 1. Load the Dataset
def load_dataset(dataset_path, img_size=(128, 128)):
    images, labels = [], []
    class_names = os.listdir(dataset_path)
    class_mapping = {name: idx for idx, name in enumerate(class_names)}

    for class_name in class_names:
        class_path = os.path.join(dataset_path, class_name)
        for img_file in os.listdir(class_path):
            img_path = os.path.join(class_path, img_file)
            img = cv2.imread(img_path)
            img = cv2.resize(img, img_size)
            images.append(img)
            labels.append(class_mapping[class_name])

    images = np.array(images, dtype="float32") / 255.0  # Normalize pixel values
    labels = np.array(labels)
    return images, labels, class_mapping

# 2. Prepare the Dataset
dataset_path = "path_to_dataset"  # Replace with the actual dataset path
img_size = (128, 128)
images, labels, class_mapping = load_dataset(dataset_path, img_size)
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

y_train = to_categorical(y_train, num_classes=len(class_mapping))
y_test = to_categorical(y_test, num_classes=len(class_mapping))

# 3. Data Augmentation
datagen = ImageDataGenerator(rotation_range=30, width_shift_range=0.2, height_shift_range=0.2,
                             shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
datagen.fit(X_train)

# 4. Define the CNN Model
def build_model(input_shape, num_classes):
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        MaxPooling2D((2, 2)),
        Dropout(0.25),

        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Dropout(0.25),

        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Dropout(0.25),

        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

model = build_model(input_shape=(img_size[0], img_size[1], 3), num_classes=len(class_mapping))

# 5. Train the Model
history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                    validation_data=(X_test, y_test), epochs=20)

# 6. Evaluate the Model
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

# 7. Save the Model
model.save("plant_disease_model.h5")

# 8. Predict Function
def predict_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, img_size)
    img = np.expand_dims(img, axis=0) / 255.0
    prediction = model.predict(img)
    class_idx = np.argmax(prediction)
    class_name = list(class_mapping.keys())[list(class_mapping.values()).index(class_idx)]
    return class_name

# Example usage
image_path = "path_to_test_image.jpg"
result = predict_image(image_path)
print(f"Predicted Class: {result}")
